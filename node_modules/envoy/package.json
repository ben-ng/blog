{
  "author": {
    "name": "Ben Ng",
    "email": "me@benng.me",
    "url": "http://benng.me"
  },
  "name": "envoy",
  "description": "Better Deployment with Node.js",
  "keywords": [
    "ftp",
    "deployment"
  ],
  "version": "0.0.6",
  "repository": {
    "type": "git",
    "url": "git://github.com/ben-ng/envoy.git"
  },
  "main": "./lib/envoy",
  "dependencies": {
    "jsftp": "0.6.x",
    "knox": "0.8.x",
    "mime": "1.2.x",
    "async": "0.2.x",
    "crypto": "0.0.x",
    "underscore": "1.4.x",
    "wrench": "1.5.1",
    "jake": "0.5.x"
  },
  "scripts": {
    "test": "jake test"
  },
  "devDependencies": {},
  "optionalDependencies": {},
  "engines": {
    "node": ">=0.8.x"
  },
  "readme": "#Envoy\nFast, simple deployment of static sites.\n\n[![Build Status](https://travis-ci.org/ben-ng/envoy.png?branch=master)](https://travis-ci.org/ben-ng/envoy)\n\n##Goals\n * **Correctness:** Deployed sites *have* to be perfect, every time.\n * **Speed:** Perform the bare minimum number of operations without compromising correctness.\n * **Simplicity:** One command should be all it takes to deploy to any service, and it should Just Work&trade;.\n\n##Supported Services\n * S3\n * FTP\n * Github Pages *(Soon...)*\n\n##High-Level Calls\n```js\n\nvar envoy=require('envoy')\n  , ftpOptions = {\n      username: 'Fluffy'\n    , password: 'McChubbers'\n    , host:     'ftp.cheeseburger.com'\n    }\n  , s3Options = {\n      \"bucket\": \"<BUCKET NAME>\"\n    , \"key\": \"<AWS ACCESS KEY>\"\n    , \"secret\": \"<AWS SECRET KEY>\"\n    , \"region\": \"<AWS REGION>\"      //us-west-1\n    }\n  , simpleWebsite = {\n      \"index.html\": '<h1>Welcome, Humans!</h1>'\n    }\n  , afterDeploy = function (err, log) {\n    if(err) {\n      console.err(\"Uh-oh: \" + err);\n    }\n    else {\n      console.log(\"Website Deployed!\");\n      \n      console.log(\"Deployment log:\");\n      for(var i=0, ii=log.length; i<ii; i++) {\n        console.log(log[i]);\n      }\n    }\n  };\n\n// Deploying a local folder to S3\nenvoy.deployFolder('./my-website-folder', 's3', s3Options, afterDeploy);\n\n// Deploying a collection of files to FTP\nenvoy.deployCollection(simpleWebsite, 'ftp', ftpOptions, afterDeploy);\n\n```\n\n##Low-Level Calls\n\nYou can perform lower level calls with the adapters directly.\n\n```js\n  var client = new require('./lib/adapters/ftp')\n    , opts = {username:'donkey', password:'kong'};\n  \n  client.before(opts, function (err) {\n  \n    client.put('some_file.txt', new Buffer('Some Data'), function (err) {\n    \n      client.after( function (err) {\n        console.log(\"Done!\");\n      } );\n      \n    });\n    \n  });\n```\n\nAll adapters support three operations\n * before\n * put\n * get\n * destroy\n * after\n\nCertain adapters like FTP will support more operations unique to their operation\n * mkdir\n * rmdir\n * list\n\nTake a look at the tests for more.\n\n##Notes\n * We leave a `.envoy` file in the remote directory to speed up future deploys. Make sure your FTP server is configured to show dotfiles.\n\n##Testing\nYou'll need a `tests/secrets.json` file to run the tests with `jake test`. See `tests/secrets.example.json` for an example `secrets.json` file. To test integration with different backends, you can have multiple secret files, name them `secrets.somestring.json` and run the tests with `jake testWith[somestring]`.\n\n * FTP\n    * Ensure user has write permissions\n    * Server should be configured to show .dotfiles\n    * Server should not auto-rename uploaded files on conflict\n    * We are tested against pure-ftpd and vsftpd\n * S3\n    * Enable static website hosting yourself\n    * We'll set `x-amz-acl = public-read` on uploaded objects",
  "readmeFilename": "Readme.md",
  "bugs": {
    "url": "https://github.com/ben-ng/envoy/issues"
  },
  "_id": "envoy@0.0.6",
  "_from": "envoy@0.0.x"
}
